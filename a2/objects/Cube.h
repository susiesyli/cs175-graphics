#ifndef CUBE_H
#define CUBE_H
#include "Shape.h"
#include "geometry.h"
#include <OpenGL/OpenGL.h>

class Cube : public Shape {

public:
  Cube() {
    // six components
    initializeComponents(6);
    constructVertices();
  };

  OBJ_TYPE getType() { return SHAPE_CUBE; }

protected:
  /// construct all vertices in vertexList, and construct the componentList
  /// which references the vertex indices
  void constructVertices() {

    // initialize componentList for six component (faces of cube)
    for (int i = 0; i < componentCount; i++) {
      for (int j = 0; j < m_segmentsY + 1; j++) {
        componentList[i].push_back(vector<int>());
      }
    }

    vertexList = new vertex *[(m_segmentsY + 1) * (m_segmentsX + 1) * 6];
    int xi, yi, zi;
    float x_sep = 1.0 / m_segmentsX;
    float y_sep = 1.0 / m_segmentsY;
    float xc = 0, yc = 0;
    vector<vertex *> vertexVec = vector<vertex *>();

    for (int comp_i = 0; comp_i < componentCount; comp_i++) {
      yc = 0;
      for (yi = 0; yi < m_segmentsY + 1; yi++) {
        xc = 0;
        for (xi = 0; xi < m_segmentsX + 1; xi++) {
          vertex *v = new vertex();
          // Assign coordinates based on the face
          // skeleton generated by chatGPT and futher modified
          switch (comp_i) {
          case 0:              // Front face (z = 0.5)
            v->x = -0.5f + xc; // x ranges from -0.5 to 0.5
            v->y = 0.5f - yc;  // y ranges from 0.5 to -0.5
            v->z = 0.5f;       // z is constant at 0.5
            v->nx = 0;
            v->ny = 0;
            v->nz = 1.0;
            break;
          case 1:             // Right face (x = 0.5)
            v->x = 0.5f;      // x is constant at 0.5
            v->y = 0.5f - yc; // y ranges from 0.5 to -0.5
            v->z = 0.5f - xc; // z ranges from 0.5 to -0.5
            v->nx = 1.0;
            v->ny = 0;
            v->nz = 0;
            break;
          case 2:             // Back face (z = -0.5)
            v->x = 0.5f - xc; // x ranges from -0.5 to 0.5
            v->y = 0.5f - yc; // y ranges from -0.5 to 0.5
            v->z = -0.5f;     // z is constant at -0.5
            v->nx = 0;
            v->ny = 0;
            v->nz = -1.0;
            break;
          case 3:              // Left face (x = -0.5)
            v->x = -0.5f;      // x is constant at -0.5
            v->y = 0.5f - yc;  // y ranges from -0.5 to 0.5
            v->z = -0.5f + xc; // z ranges from -0.5 to 0.5
            v->nx = -1, 0;
            v->ny = 0;
            v->nz = .0;
            break;
          case 4:              // Top face (y = 0.5)
            v->x = -0.5f + xc; // x ranges from -0.5 to 0.5
            v->y = 0.5f;       // y is constant at 0.5
            v->z = -0.5f + yc; // z ranges from -0.5 to 0.5
            v->nx = 0;
            v->ny = 1.0;
            v->nz = 0;
            break;
          case 5:              // Bottom face (y = -0.5)
            v->x = -0.5f + xc; // x ranges from -0.5 to 0.5
            v->y = -0.5f;      // y is constant at -0.5
            v->z = 0.5f - yc;  // z ranges from -0.5 to 0.5
            v->nx = 0;
            v->ny = -1.0;
            v->nz = 0;
            break;
          }

          addVertex(v, comp_i, yi);
          xc += x_sep;
        }

        yc += y_sep;
      }
    }
    flattenComponent();
    printf("cube: constructed %d vertices\n", vertexCount);
  }
};

#endif
